# Must have utils
CC=arm-none-eabi-gcc
AR=arm-none-eabi-ar
MKDIR=mkdir
CP=cp -f
RM=rm

# Final name
LIB=libehal-$(MCU).a

# Get the lib folder based on the toolchain location.
LIB_INSTALL_DIR=$(shell dirname $(shell which $(CC)))/../arm-none-eabi/lib/
INC_INSTALL_DIR=$(shell dirname $(shell which\
$(CC)))/../arm-none-eabi/include/ehal

# Get folders from within ehal.
GENERIC_PATH=ehal
SPECIFIC_PATH=ehal/specific/$(ARCH)

CWARN =-Wall -Wstrict-prototypes
MODE=-thumb
ONCE_FLAGS =--combine  -fwhole-program
CTUNING =-funsigned-char -funsigned-bitfields -fpack-struct -fshort-enums \
-ffunction-sections -fno-inline-small-functions -fno-split-wide-types \
-fno-tree-scev-cprop -Wl,--relax,--gc-sections
INCLUDE_DIR=					\
		-I.				\
		-I./ehal			\
		-I./ehal/specific/		\
		-I./$(SPECIFIC_PATH)

CFLAGS = $(CDEBUG) $(CDEFS) $(CINCS) -Os $(CWARN) $(CSTANDARD) \
$(CEXTRA) $(INCLUDE_DIR)

ALL_CFLAGS=-mcpu=arm7tdmi-s $(CFLAGS) $(INCLUDE_DIR)

LDFLAGS=

# Resources definition. No need to change, change the ifeq of specific MCUs.
# Also... pio0 brings together the API sinse it gets included for any pio
# usage.

PIO=	$(SPECIFIC_PATH)/pio_slow.c		\
	$(SPECIFIC_PATH)/pio_specific.h		\
	$(SPECIFIC_PATH)/lpc210x_gnuarm.h	\
	$(GENERIC_PATH)/pio.h

# TODO: complete me ...
SPIM=
USI_SRC=
I2C_SRC=
ADC_SRC=
UART_SRC=
PWM=
RTC=
INT=
CCP=
ETH=
DMA=

# .c + .h
RESOURCES=	$(PIO)		\
		$(GENERIC_PATH)/types.h
# .h only
INC=$(filter %.h, $(RESOURCES))
# .c only
SRC=$(filter %.c, $(RESOURCES))
OBJ=$(SRC:.c=.o)

.PHONY: all install clean
all: $(LIB)

install:
	$(MKDIR) -p $(INC_INSTALL_DIR)
	$(CP) $(LIB) $(LIB_INSTALL_DIR)
	$(CP) $(INC) $(INC_INSTALL_DIR)

$(LIB): $(OBJ)
	$(AR) rcs $@ $^

%.elf: $(OBJ)
	$(CC) $(ALL_CFLAGS) $(LDFLAGS) $^ $@

.c.o:
	$(CC) $(ALL_CFLAGS) -c -o $@ $<

.S.o:
	$(CC) $(ALL_ASMFLAGS) -c -o $@ $<

clean:
	$(RM) -f $(OBJ) $(LIB)
