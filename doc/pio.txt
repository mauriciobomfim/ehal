= PIO =
:Author: Marcelo Politzer Couto
:Email: <mpolitzer.c@gmail.com>
:Date: Sat Sep 11 13:59:14 UTC 2010
:Author Initials: MPC
:Revision: 0.1

link:index.html[index]

Introduction
------------
This is the module for Port Input/Output.

[[FUNCTIONS]]

.Functions
|===========================================================================
|Functions: P - port, V - value, M - mask| Bits of VALUE (1/0):	| Operation:
|void pio_dir (P, V, M)		| input	/ output	| Set direction
|void pio_write (P, V, M)	| high / low		| Set value
|void pio_pullup (P, V, M)	| on / off		| Set pullup
|pio_t pio_read (P, M)		| NONE			| Return readed port
|===========================================================================

.PARAMETERS

- *PORT* - Indicates which port of the device we're using. This value is
  within 0 <= PORT < PIO_NUM_PORTS, PIO_NUM_PORTS is defined in the
  pio_specific.h for a given MCU. For example, on atmega8 there are 3 ports,
  PORTB, PORTC and PORTD. In this case we'll have 0 <= PORT < 3, where 0 is
  PORTB, 1 is PORTC and 2 is PORTD. If a non-existent port is used, this
  will generate a compilation time error, more precisely a linkage error.

- *VALUE* - Depends on the operation. Check <<FUNCTIONS,FUNCTIONS>> table.
  This parameter doesn't apply for read function.

- *MASK* - Is which bits of VALUE we want to change in the port. if the bit
is on, 

Example
-------

Lets consider we're using an 8bits MCU.

----
/* Write Example: */

/* Constant to reference a port and pin. */
#define DRIVER_PORT	0
#define SS P0

/* make pin0 of port0 output. The rest is not changed. */
pio_dir (DRIVER_PORT, 0, SS );

/* make pin0 of port0 high, again without changing the rest of the port. */
pio_write (DRIVER_PORT, SS, SS);
----

----
/* Read Example: */
#define DRIVER_PORT	0
#define SS P7

#define PARTIA_PORT	1
/* 4bits interface */
#define PPBITS	(P0|P1|P2|P3)

pio_t v, pp;
/* Make whole port in. */
pio_dir (DRIVER_PORT, PIO_ALL, PIO_ALL);

/* Read all bits. */
v = pio_read (DRIVER_PORT, PIO_ALL);

/* set PARTIAL_PORT */
pio_dir (PARTIAL_PORT, PPBITS, PPBITS);

/* Read PARTIAL_PORT, pp only gets the bits from PPBITS. */
pp = pio_read (PARTIAL_PORT, PPBITS);
----

