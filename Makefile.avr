CC=avr-gcc
AR=avr-ar
MKDIR=mkdir
CP=cp
RM=rm

#TODO: trocar orientacao do build arquivo para recurso.
# if( $(MCU), atmega8 )
# PIO = PIO1 ...
# SPI = SPI1 ...
# se nao tiver nada

# Get the lib folder based on the toolchain location.
LIB_INSTALL_DIR=$(shell dirname $(shell which avr-gcc))/../avr/lib
INC_INSTALL_DIR=$(shell dirname $(shell which avr-gcc))/../avr/include/ehal

# Get folders from within ehal.
GENERIC_PATH=src
SPECIFIC_PATH=src/specific/$(ARCH)

CFLAGS=-Wall -ansi -Os -funsigned-char -funsigned-bitfields -fpack-struct \
	-fshort-enums -ffunction-sections -fno-inline-small-functions     \
	-fno-split-wide-types -fno-tree-scev-cprop
INCLUDE_DIR=					\
		-I.				\
		-I./src				\
		-I./src/specific/		\
		-I./$(SPECIFIC_PATH)
ALL_CFLAGS=-mmcu=$(MCU) $(CFLAGS) $(INCLUDE_DIR)

LDFLAGS=

# Resources definition.
PIO0= $(SPECIFIC_PATH)/pio0.c $(SPECIFIC_PATH)/pio_specific.h
PIO1= $(SPECIFIC_PATH)/pio1.c $(PIO0)
PIO2= $(SPECIFIC_PATH)/pio2.c $(PIO1)
PIO3= $(SPECIFIC_PATH)/pio3.c $(PIO2)
PIO4= $(SPECIFIC_PATH)/pio4.c $(PIO3)
PIO5= $(SPECIFIC_PATH)/pio5.c $(PIO4)
PIO6= $(SPECIFIC_PATH)/pio6.c $(PIO5)

SPIM0= $(SPECIFIC_PATH)/spim0.c


ifeq ($(MCU),attiny25)
PIO= $(PIO0)
PIO_INC= $(SPECIFIC_PATH)/pio_specific.h
SPI_SRC=
SPI_INC=
else

ifeq ($(MCU),atmega8)
PIO= $(PIO2)
PIO_INC= $(SPECIFIC_PATH)/pio_specific.h
SPI_SRC= $(SPECIFIC_PATH)/spim0.c
SPI_INC= $(SPECIFIC_PATH)/spim_specific.h
else

ifeq ($(MCU),atmega88)
PIO= $(PIO2)
PIO_INC= $(SPECIFIC_PATH)/pio_specific.h
SPI_SRC= $(SPECIFIC_PATH)/spim0.c
SPI_INC= $(SPECIFIC_PATH)/spim_specific.h
else

ifeq ($(MCU),atmega16)
PIO= $(PIO3)
PIO_INC= $(SPECIFIC_PATH)/pio_specific.h
SPI_SRC= $(SPECIFIC_PATH)/spim0.c
SPI_INC= $(SPECIFIC_PATH)/spim_specific.h
else

ifeq ($(MCU),atmega32)
PIO= $(PIO3)
PIO_INC= $(SPECIFIC_PATH)/pio_specific.h
SPI_SRC= $(SPECIFIC_PATH)/spim0.c
SPI_INC= $(SPECIFIC_PATH)/spim_specific.h
else

ifeq ($(MCU),atmega128)
PIO= $(PIO6)
PIO_INC= $(SPECIFIC_PATH)/pio_specific.h
SPI_SRC= $(SPECIFIC_PATH)/spim0.c
SPI_INC= $(SPECIFIC_PATH)/spim_specific.h
else

PIO= $(PIO0)
PIO_INC= $(SPECIFIC_PATH)/pio_specific.h
endif
endif
endif
endif
endif
endif

# TODO: complete me ...
USI_SRC=
I2C_SRC=
ADC_SRC=
UART_SRC=
PWM=
RTC=
INT=
CCP=
ETH=
DMA=

SRC=$(PIO) $(SPI_SRC)
INC=$(PIO_INC) $(SPI_INC)

GENERIC_INC=	$(GENERIC_PATH)/pio.h	\
		$(GENERIC_PATH)/types.h
SPECIFIC_INC=$(PIO_INC) $(SPI_INC)

LIB=libehal-$(MCU).a

OBJ=$(SRC:.c=.o)

all: $(LIB)

install: all
	$(MKDIR) -p $(INC_INSTALL_DIR)
	$(CP) $(LIB) $(LIB_INSTALL_DIR)
	$(CP) $(ALL_INC) $(INC_INSTALL_DIR)
	$(CP) $(GENERIC_INC) $(INC_INSTALL_DIR)
	$(CP) $(SPECIFIC_INC) $(INC_INSTALL_DIR)

$(LIB): $(OBJ) $(HEADERS)
	$(AR) rcs $@ $(OBJ)

%.elf: $(OBJ)
	$(CC) $(ALL_CFLAGS) $^ $@ $(LDFLAGS)

.c.o:
	$(CC) -c -o $@ $< $(ALL_CFLAGS)

.PHONY:
clean:
	$(RM) -f $(SPECIFIC_DIR)/*.o $(LIB)
