# Must have utils
CC=avr-gcc
AR=avr-ar
MKDIR=mkdir
CP=cp
RM=rm

# Final name
LIB=libehal-$(MCU).a

#TODO: trocar orientacao do build arquivo para recurso.
# if( $(MCU), atmega8 )
# PIO = PIO1 ...
# SPI = SPI1 ...
# se nao tiver nada

# Get the lib folder based on the toolchain location.
LIB_INSTALL_DIR=$(shell dirname $(shell which avr-gcc))/../avr/lib
INC_INSTALL_DIR=$(shell dirname $(shell which avr-gcc))/../avr/include/ehal

# Get folders from within ehal.
GENERIC_PATH=src
SPECIFIC_PATH=src/specific/$(ARCH)

CFLAGS=-Wall -ansi -Os -funsigned-char -funsigned-bitfields -fpack-struct \
	-fshort-enums -ffunction-sections -fno-inline-small-functions     \
	-fno-split-wide-types -fno-tree-scev-cprop
INCLUDE_DIR=					\
		-I.				\
		-I./src				\
		-I./src/specific/		\
		-I./$(SPECIFIC_PATH)
ALL_CFLAGS=-mmcu=$(MCU) $(CFLAGS) $(INCLUDE_DIR)

LDFLAGS=

# Resources definition. No need to change, change the ifeq of specific MCUs.
# Also... pio0 brings together the API sinse it gets included for any pio
# usage.

PIO=	$(SPECIFIC_PATH)/pio.c	\
	$(SPECIFIC_PATH)/pio_specific.h	\
	$(GENERIC_PATH)/pio.h

SPIM0=	$(SPECIFIC_PATH)/spim0.c	\
	$(SPECIFIC_PATH)/spim_specific.h

# checking MCU resources

ifeq ($(MCU),attiny25)
else

ifeq ($(MCU),atmega8)
SPI= $(SPIM0)
else

ifeq ($(MCU),atmega88)
SPI= $(SPIM0)
else

ifeq ($(MCU),atmega16)
SPI= $(SPIM0)
else

ifeq ($(MCU),atmega32)
SPI= $(SPIM0)
else

ifeq ($(MCU),atmega128)
SPI= $(SPIM0)
else # Don't have port for this one... but trying out any way.
	@echo unsuported mcu!
endif
endif
endif
endif
endif
endif

# TODO: complete me ...
USI_SRC=
I2C_SRC=
ADC_SRC=
UART_SRC=
PWM=
RTC=
INT=
CCP=
ETH=
DMA=

# .c + .h
RESOURCES=	$(PIO)		\
		$(SPI_SRC)	\
		$(GENERIC_PATH)/types.h
# .h only
INC=$(filter %.h, $(RESOURCES))
# .c only
SRC=$(filter %.c, $(RESOURCES))
OBJ=$(SRC:.c=.o)

all: $(LIB)

install: all
	$(MKDIR) -p $(INC_INSTALL_DIR)
	$(CP) $(LIB) $(LIB_INSTALL_DIR)
	$(CP) $(INC) $(INC_INSTALL_DIR)

$(LIB): $(OBJ)
	$(AR) rcs $@ $^

%.elf: $(OBJ)
	$(CC) $(ALL_CFLAGS) $^ $@ $(LDFLAGS)

.c.o:
	$(CC) -c -o $@ $< $(ALL_CFLAGS)

.PHONY:
clean:
	$(RM) -f $(OBJ) $(LIB)
